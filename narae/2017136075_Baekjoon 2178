//백준 2178번 - 미로탐색
//https://www.acmicpc.net/problem/2178

//참고한 정답 코드
//https://blockdmask.tistory.com/182
//너비우선탐색을 적극적으로 사용할 수 있는 문제
//너비우선탐색이란? https://gmlwjd9405.github.io/2018/08/15/algorithm-bfs.html

//참고 코드 본 후 내가 작성한 코드
#include <queue>
#include <iostream>
using namespace std;

#define MAXSIZE 100

int n, m;
char map[MAXSIZE][MAXSIZE];
int visited[MAXSIZE][MAXSIZE];
int direction_x[4] = { 0, 0, -1, 1 };
int direction_y[4] = { 1, -1, 0, 0 };
queue<pair<int, int>> q;

//입력값을 받는 함수
void input_value() {
	cin >> n >> m;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> map[i][j];
		}//infor end
	}//exfor ene
}

void bfs() {
	int cur_x = 0;
	int cur_y = 0;
	int next_x = 0;
	int next_y = 0;

	//시작 노드 큐에 넣음
	visited[cur_x][cur_y] = 1;
	q.push(make_pair(cur_x, cur_y));

	while (!q.empty()) {
		//기준이 될 노드를 큐에서 꺼냄
		cur_x = q.front().first;
		cur_y = q.front().second;
		q.pop();

		//기준 노드 상하좌우 살펴봄
		for (int i = 0; i < 4; i++) {
			next_x = cur_x + direction_x[i];
			next_y = cur_y + direction_y[i];

			//맵내부라면
			if (next_x >= 0 && next_x < n && next_y >= 0 && next_y < m) {
				//갈 수 있는 길이라면
				if (map[next_x][next_y] == '1') {
					//가봤던 곳이 아니라면
					if (visited[next_x][next_y] == 0) {
						q.push(make_pair(next_x, next_y));
						visited[next_x][next_y] = visited[cur_x][cur_y] + 1;
					}
				}
			}//end if

		}//end for

	}//end while

}

int main() {
	input_value();

	bfs();

	cout << visited[n - 1][m - 1] << "\n";

	return 0;
}
